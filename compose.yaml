services:
  discovery-server:
    image: rainaddan/taxi-restapi-discovery-server
    container_name: discovery-server
    deploy:
      resources:
        limits:
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://discovery-server:8761"]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      logstash:
        condition: service_healthy
      tracing-server:
        condition: service_started
    ports:
      - "8761:8761"
    restart: unless-stopped

  api-gateway:
    image: rainaddan/taxi-restapi-api-gateway
    container_name: api-gateway
    deploy:
      resources:
        limits:
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://api-gateway:3030/actuator/health"]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      discovery-server:
        condition: service_healthy
      logstash:
        condition: service_healthy
      tracing-server:
        condition: service_started
    ports:
      - "3030:3030"
    restart: unless-stopped

  passenger-service:
    image: rainaddan/taxi-restapi-passenger-service
    container_name: passenger-service
    deploy:
      resources:
        limits:
          memory: 512M
    env_file:
      - docker/env/passenger-service.env
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://passenger-service:8081/actuator/health" ]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      tracing-server:
        condition: service_started
      logstash:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8081:8081"
    restart: unless-stopped

  driver-service:
    image: rainaddan/taxi-restapi-driver-service
    container_name: driver-service
    deploy:
      resources:
        limits:
          memory: 512M
    env_file:
      - docker/env/driver-service.env
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://driver-service:8082/actuator/health" ]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      tracing-server:
        condition: service_started
      logstash:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_started
    ports:
      - "8082:8082"
    restart: unless-stopped

  rides-service:
    image: rainaddan/taxi-restapi-rides-service
    container_name: rides-service
    deploy:
      resources:
        limits:
          memory: 512M
    env_file:
      - docker/env/rides-service.env
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://rides-service:8083/actuator/health" ]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      tracing-server:
        condition: service_started
      logstash:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    ports:
      - "8083:8083"
    restart: unless-stopped

  notification-service:
    image: rainaddan/taxi-restapi-notification-service
    container_name: notification-service
    deploy:
      resources:
        limits:
          memory: 512M
    env_file:
      - docker/env/notification-service.env
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://notification-server:8084/actuator/health" ]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      tracing-server:
        condition: service_started
      logstash:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    ports:
      - "8084:8084"
    restart: unless-stopped

  payment-service:
    image: rainaddan/taxi-restapi-payment-service
    container_name: payment-service
    deploy:
      resources:
        limits:
          memory: 512M
    env_file:
      - docker/env/payment-service.env
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://payment-server:8085/actuator/health" ]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      tracing-server:
        condition: service_started
      logstash:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8085:8085"
    restart: unless-stopped

  admin-server:
    image: rainaddan/taxi-restapi-admin-server
    container_name: admin-server
    deploy:
      resources:
        limits:
          memory: 512M
    depends_on:
      discovery-server:
        condition: service_healthy
    environment:
      SERVER_PORT: 8086
    ports:
      - "8086:8086"

  authentication-server:
    image: rainaddan/taxi-restapi-authentication-server
    container_name: authentication-server
    deploy:
      resources:
        limits:
          memory: 512M
    env_file:
      - docker/env/authentication-server.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://authentication-server:8087/actuator/health"]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      logstash:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      keycloak:
        condition: service_started
      tracing-server:
        condition: service_started
    ports:
      - "8087:8087"
    restart: unless-stopped

  promocode-service:
    image: rainaddan/taxi-restapi-promocode-service
    container_name: promocode-service
    deploy:
      resources:
        limits:
          memory: 512M
    env_file:
      - docker/env/promocode-service.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://promocode-service:8088/actuator/health"]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      tracing-server:
        condition: service_started
      logstash:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8088:8088"
    restart: unless-stopped

  # Extra Services

  postgres:
    image: postgis/postgis:17-master
    container_name: postgres
    deploy:
      resources:
        limits:
          memory: 256M
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: docker
      POSTGRES_DB: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/script/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d rides_db -U postgres"]
      interval: 30s
      timeout: 5s
      retries: 5

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.16.0
    container_name: postgres-exporter
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgres://postgres:docker@5432/rides_db?sslmode=disable"
    depends_on:
      prometheus-server:
        condition: service_started
      postgres:
        condition: service_healthy

  zookeeper:
    image: confluentinc/cp-zookeeper:7.8.0
    hostname: zookeeper
    container_name: zookeeper
    deploy:
      resources:
        limits:
          memory: 256M
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    ports:
      - "2181:2181"
    env_file:
      - docker/env/zookeeper.env

  kafka:
    image: confluentinc/cp-kafka:7.8.0
    hostname: kafka
    container_name: kafka
    deploy:
      resources:
        limits:
          memory: 256M
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:9092 --list
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    env_file:
      - docker/env/kafka.env
    depends_on:
      zookeeper:
        condition: service_healthy

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:26.0
    deploy:
      resources:
        limits:
          memory: 512M
    env_file:
      - docker/env/keycloak.env
    ports:
      - "9090:8080"
    command: [ "start-dev", "--import-realm" ]
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./docs/keycloak/:/opt/keycloak/data/import/

  tracing-server:
    image: openzipkin/zipkin
    container_name: tracing-server
    deploy:
      resources:
        limits:
          memory: 512M
    ports:
      - "9411:9411"

# Grafana / Prometheus

  grafana-server:
    build: ./docker/grafana
    container_name: grafana-server
    deploy:
      resources:
        limits:
          memory: 256M
    ports:
      - "3000:3000"

  prometheus-server:
    build: ./docker/prometheus
    container_name: prometheus-server
    deploy:
      resources:
        limits:
          memory: 256M
    ports:
      - "9091:9090"

# Elasticsearch / Logstash / Kibana

  elasticsearch:
    image: elasticsearch:7.17.22
    hostname: elasticsearch
    container_name: elasticsearch
    deploy:
      resources:
        limits:
          memory: 256M
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://elasticsearch:9200" ]
      interval: 5s
      timeout: 3s
      retries: 10
    env_file:
      - docker/env/elasticsearch.env
    ports:
      - "9200:9200"
    restart: unless-stopped

  kibana:
    image: kibana:7.17.22
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy

  logstash:
    image: logstash:7.17.22
    container_name: logstash
    volumes:
      - ./docs/logstash:/usr/share/logstash/pipeline:ro
    ports:
      - "5000:5000"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://logstash:9600"]
      interval: 30s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    depends_on:
      elasticsearch:
        condition: service_healthy

networks:
  default:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  keycloak:
    driver: local
